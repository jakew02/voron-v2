# This macro was provided by discord user Garrettwp to whom i give my thanks for sharing it with me.
# I have tweaked it a bit.
#
# this macro is  based on the great Annex magprobe dockable probe macros "#Originally developed by Mental, modified for better use on K-series printers by RyanG and Trails"
# that macro can be found here https://github.com/Annex-Engineering/Annex-Engineering_Other_Printer_Mods/blob/master/All_Printers/Microswitch_Probe/Klipper_Macros/dockable_probe_macros.cfg
#
# by standing on the shoulders of giants, lets see if we can see further

[gcode_macro User_Variables]
variable_verbose:               True  # Enable verbose output
variable_travel_speed:          200   # how fast all other travel moves will be performed when running these macros
variable_z_drop_speed:          20    # how fast the z will lower when moving to the z location to clear the probe
variable_home_z_height:         15    # Z when homing

# if a separate Z endstop switch is in
# use, specify the coordinates of the switch here (Voron).
# Set to 0 to have the probe move to center of bed
variable_z_endstop_x:            205
variable_z_endstop_y:            300

# location to park the toolhead
variable_park_toolhead:         False  # Enable toolhead parking
variable_parkposition_x:        150
variable_parkposition_y:        150
variable_parkposition_z:        30

#dock location
variable_docklocation_x:        234   # X Dock position
variable_docklocation_y:        300   # Y Dock position
variable_docklocation_z:        15    # Z dock position
variable_dockarmslenght:        30    # Dock arms lenght, toolhead movement necessary to clear the dock arms

# Do not modify below
gcode:
    {% set Mx = printer['configfile'].config["stepper_x"]["position_max"]|float %}
    {% set My = printer['configfile'].config["stepper_y"]["position_max"]|float %}
    {% set Ox = printer['configfile'].config["probe"]["x_offset"]|float %}
    {% set Oy = printer['configfile'].config["probe"]["y_offset"]|float %}
    {% set Oz = printer['configfile'].config["probe"]["z_offset"]|float %}

    # if docklocation_z is zero, use Home Z height for safety
    {% if docklocation_z == 0 %}
        SET_GCODE_VARIABLE MACRO=Probe_Variables VARIABLE=docklocation_z VALUE={ home_z_height }
    {% endif %}

    # If x, y coordinates are set for z endstop, assign them
    {% if z_endstop_x != 0 or z_endstop_y != 0 %}
        SET_GCODE_VARIABLE MACRO=Probe_Variables VARIABLE=z_endstop_x VALUE={ z_endstop_x }
        SET_GCODE_VARIABLE MACRO=Probe_Variables VARIABLE=z_endstop_y VALUE={ z_endstop_y }

    # if no x, y coordinates for z endstop, assume probe is endstop and move toolhead to center of bed
    {% else %}
        SET_GCODE_VARIABLE MACRO=Probe_Variables VARIABLE=z_endstop_x VALUE={ (Mx * 0.5) - Ox }
        SET_GCODE_VARIABLE MACRO=Probe_Variables VARIABLE=z_endstop_y VALUE={ (My * 0.5) - Oy }
    {% endif %}


[gcode_macro Probe_Variables]
variable_probe_attached:            False
variable_probe_state:               False
variable_probe_lock:                False
variable_z_endstop_x:               244
variable_z_endstop_y:               300
gcode:


[gcode_macro Homing_Variables]
variable_homed_x:                   False
variable_homed_y:                   False
variable_homed_z:                   False
variable_homing:                    False
variable_homed:                     False
default_parameter_axis:
default_parameter_reset:            0
gcode:
    {% set R  = params.RESET %}

    # if called with an axis in the parameters, set the axis to "true"
    {% if 'AXIS' in params %}
        SET_GCODE_VARIABLE MACRO=Homing_Variables VARIABLE=homed_{ AXIS.lower() } VALUE={ True }
    {% endif %}

    {% if R %}
        SET_GCODE_VARIABLE MACRO=Homing_Variables VARIABLE=homed_x   VALUE={ False }
        SET_GCODE_VARIABLE MACRO=Homing_Variables VARIABLE=homed_y   VALUE={ False }
        SET_GCODE_VARIABLE MACRO=Homing_Variables VARIABLE=homed_z   VALUE={ False }
        SET_GCODE_VARIABLE MACRO=Homing_Variables VARIABLE=homing    VALUE={ False }
        SET_GCODE_VARIABLE MACRO=Homing_Variables VARIABLE=homed     VALUE={ False }
        SET_GCODE_VARIABLE MACRO=Probe_Variables VARIABLE=probe_lock VALUE={ False }
   {% endif %}

# Probe Calibrate
[gcode_macro PROBE_CALIBRATE]
rename_existing:             _PROBE_CALIBRATE
gcode:
    CheckProbe action=query
  Attach_Probe

    _PROBE_CALIBRATE {% for p in params
            %}{'%s=%s' % (p, params[p])}{%
           endfor %}

  SAVE_GCODE_STATE NAME=original_nozzle_location  #store current nozzle location
    Dock_Probe
    RESTORE_GCODE_STATE NAME=original_nozzle_location MOVE=1  #restore current nozzle location

# Probe Accuracy
[gcode_macro PROBE_ACCURACY]
rename_existing:             _PROBE_ACCURACY
gcode:
    #SAVE_GCODE_STATE NAME=original_nozzle_location  #store current nozzle location
    CheckProbe action=query
    Attach_Probe
    Park_Toolhead
    #G0 X150 Y150 Z30
    _PROBE_ACCURACY {% for p in params
            %}{'%s=%s' % (p, params[p])}{%
           endfor %}

    Dock_Probe
    #RESTORE_GCODE_STATE NAME=original_nozzle_location MOVE=1  #restore current nozzle location

# enable to SET_KINEMATIC_POSITION for Z hop
[force_move]
enable_force_move: True

# Homeing Override
[homing_override]
axes: xyz
set_position_z: 0
gcode:
    G90
    G0 Z15 F600
    # collect user state variables
    User_Variables
    {% set V = printer["gcode_macro User_Variables"].verbose %}
    SET_GCODE_VARIABLE MACRO=Homing_Variables VARIABLE=homing VALUE={ True }

    CheckProbe action=query

    # reset parameters
    {% set X, Y, Z = False, False, False %}

    # which axes have been requested for homing
    {% if   not 'X' in params
        and not 'Y' in params
        and not 'Z' in params %}

        {% set X, Y, Z = True, True, True %}

    {% else %}
        {% if 'X' in params %}
            {% set X = True %}
        {% endif %}

        {% if 'Y' in params %}
            {% set Y = True %}
        {% endif %}

        {% if 'Z' in params %}
            {% set Z = True %}
        {% endif %}

        {% if 'X' in params
          and 'Y' in params
          and 'Z' in params %}
            # reset homing state variables
            # if homing all axes
            Homing_Variables reset=1
         {% endif %}

    {% endif %}

    # Home x
    {% if X %}
        {% if V %}
            { action_respond_info("Homing X") }
        {% endif %}
        G28 X0
        # set X axis as homed
        Homing_Variables axis=X
    {% endif %}

    # Home y
    {% if Y %}
        {% if V %}
            { action_respond_info("Homing Y") }
        {% endif %}
        G28 Y0
        # set Y axis as homed
        Homing_Variables axis=Y
    {% endif %}

    # Home z
    {% if Z %}
        {% if V %}
            { action_respond_info("Homing Z") }
        {% endif %}

        # if probe is configured as endstop, attach it
        {% if printer['configfile'].config["stepper_z"]["endstop_pin"] == 'probe:z_virtual_endstop' %}
            Attach_Probe
        {% endif %}

        Home_Z
        # set Z axis as homed
        Homing_Variables axis=Z

        # if probe is configured as endstop, dock it
        {% if printer['configfile'].config["stepper_z"]["endstop_pin"] == 'probe:z_virtual_endstop' %}
            Dock_Probe
        {% endif %}
    {% endif %}

    CheckProbe action=query

    SET_GCODE_VARIABLE MACRO=Homing_Variables VARIABLE=homing VALUE={ False }

    # park the toolhead
    Park_Toolhead


# Home Z Routine
[gcode_macro Home_Z]
gcode:
    G0 X205 Y270 F6000
    {% set Zx = printer["gcode_macro Probe_Variables"].z_endstop_x         %}
    {% set Zy = printer["gcode_macro Probe_Variables"].z_endstop_y         %}
    {% set Hzh = printer["gcode_macro User_Variables"].home_z_height|float %}
    {% set St = printer["gcode_macro User_Variables"].travel_speed * 60    %}
    {% set Sz = printer["gcode_macro User_Variables"].z_drop_speed * 60    %}
    {% set Hx = printer["gcode_macro Homing_Variables"].homed_x            %}
    {% set Hy = printer["gcode_macro Homing_Variables"].homed_y            %}

    # if x and y are not homed yet, raise error
    {% if not (Hx and Hy) %}
        { action_raise_error("X and Y not homed!") }

    {% else %}
        # move tool to safe homing position and home Z axis
        # location of z endstop
        G1 X{Zx} Y{Zy} Z{Hzh} F6000
        G28 Z0
        G1 Z{Hzh} F{Sz}

    {% endif %}


# check to see if probe is where it is supposed to be after
# attaching/docking maneuver and set homing error or shutdown
[gcode_macro CheckProbe]
variable_probe_state:           0
default_parameter_action:
gcode:
    Query_Probe
    SetProbeState action={ ACTION }


# due to how templates are evaluated, we have query endstops in one
# macro and call another macro to make decisions based on the result
[gcode_macro SetProbeState]
default_parameter_action:
gcode:
    {% set P = printer.probe.last_query %}
    {% set V = printer["gcode_macro User_Variables"].verbose %}

    # If triggered (true), probe not attached
    {% if P %}
        SET_GCODE_VARIABLE MACRO=Probe_Variables VARIABLE=probe_attached VALUE={ False }

    # If not triggered (false), probe attached
    {% else %}
        SET_GCODE_VARIABLE MACRO=Probe_Variables VARIABLE=probe_attached VALUE={ True }
    {% endif %}

    {% if params.ACTION == 'query' %}
          SET_GCODE_VARIABLE MACRO=Probe_Variables VARIABLE=probe_state VALUE={ P }
    {% endif %}

    # if probe fails to attach/detach
    # if not docked
    {% if (not P and params.ACTION == 'dock') %}
        { action_raise_error("Probe dock failed!") }
    {% endif %}

    # if not attached
    {% if P and params.ACTION == 'attach' %}
        { action_raise_error("Probe attach failed!") }
    {% endif %}

# Override M84 to reset homing state if motors are disabled.
[gcode_macro M84]
rename_existing:             M84.1
gcode:
    Homing_Variables reset=1
    M84.1


# Override M18 to reset homing state if motors are disabled.
[gcode_macro M18]
rename_existing:             M18.1
gcode:
    Homing_Variables reset=1
    M18.1


# Park Toolhead Routine
[gcode_macro Park_Toolhead]
gcode:
    {% set P = printer["gcode_macro User_Variables"].park_toolhead %}
    {% set Px = printer["gcode_macro User_Variables"].parkposition_x %}
    {% set Py = printer["gcode_macro User_Variables"].parkposition_y %}
    {% set Pz = printer["gcode_macro User_Variables"].parkposition_z %}
    {% set St = printer["gcode_macro User_Variables"].travel_speed * 60 %}
    {% set H = printer["gcode_macro Homing_Variables"].homing %}
    {% set Hx = printer["gcode_macro Homing_Variables"].homed_x %}
    {% set Hy = printer["gcode_macro Homing_Variables"].homed_y %}
    {% set Hz = printer["gcode_macro Homing_Variables"].homed_z %}
    {% set V = printer["gcode_macro User_Variables"].verbose %}

    {% if (P and Hx and Hy and Hz) %}
        {% if V %}
            { action_respond_info("Parking Toolhead") }
        {% endif %}
        G90
        G1 X{Px} Y{Py} Z{Pz} F{St}
    {% endif %}


# attaching the probe if not already attached
[gcode_macro SECURE_ATTACH_PROBE]
gcode:
    QUERY_PROBE
    _PROBE_ACTION action=attach
    _CHECK_PROBE action=check_attach

# docking the probe if not already docked
[gcode_macro SECURE_DOCK_PROBE]
gcode:
    QUERY_PROBE
    _PROBE_ACTION action=dock
    _CHECK_PROBE action=check_dock

[gcode_macro _CHECK_PROBE]
variable_probe_state: 0
default_parameter_action:
gcode:
    QUERY_PROBE
    _PROBE_ACTION action={ ACTION }

[gcode_macro _PROBE_ACTION]
default_parameter_action:        
gcode:
  {% set state = not printer.probe.last_query %}
  SET_GCODE_VARIABLE MACRO=_CHECK_PROBE VARIABLE=probe_state VALUE={ state }

  # attach/dock probe
  {% if not state and params.ACTION == 'attach' %}
    _ATTACH_PROBE
  {% endif %}
  {% if state and params.ACTION == 'dock' %}
    _DOCK_PROBE
  {% endif %}

  # check if probe fails to attach/detach
  {% if state and params.ACTION == 'check_dock' %}
    { action_raise_error("Probe dock failed!") }
  {% endif %}
  {% if not state and params.ACTION == 'check_attach' %}
    { action_raise_error("Probe attach failed!") }
  {% endif %}

# this attaching from above is more silent but would
# be dangerous if the probe is already attached!
#[gcode_macro _ATTACH_PROBE]
#gcode:
#    SAVE_GCODE_STATE NAME=_ATTACH_PROBE
#    G90                            ; absolute positioning
#    G0 X252.5 Y300 Z10 F12000      ; move to mag-probe
#    G0 Z0.0 F540                   ; move down to mag-probe
#    G0 Y285 F6000                  ; move out
#    G0 Z10 F540                    ; move up
#    RESTORE_GCODE_STATE NAME=_ATTACH_PROBE

[gcode_macro _ATTACH_PROBE]
gcode:
    SAVE_GCODE_STATE NAME=_ATTACH_PROBE
    G90                            ; absolute positioning
    G0 X234 Y300 Z10 F12000      ; move to mag-probe
    #G0 Z1.0 F540                   ; move down to mag-probe
    #G0 Y300 F6000                  ; move in
    G0 Y270 F6000                  ; move out
    #G0 Z10 F540                    ; move up
    RESTORE_GCODE_STATE NAME=_ATTACH_PROBE

[gcode_macro _DOCK_PROBE]
gcode:
    SAVE_GCODE_STATE NAME=_DOCK_PROBE
    G90                            ; absolute positioning
    G0 X234 Y270 Z10 F12000      ; move to mag-probe
    #G0 Z1.0 F540                   ; move down to mag-probe
    G0 Y300 F6000                  ; move in
    G0 X100 F6000                    ; move up
    RESTORE_GCODE_STATE NAME=_DOCK_PROBE

[gcode_macro PROBE_ACCURACY]
rename_existing: _PROBE_ACCURACY
gcode:
    #store current nozzle location
    #SAVE_GCODE_STATE NAME=original_nozzle_location
    SECURE_ATTACH_PROBE
    PARKCENTER Z={printer.configfile.settings.quad_gantry_level.horizontal_move_z}
    _PROBE_ACCURACY {% for p in params 
            %}{'%s=%s' % (p, params[p])}{% 
           endfor %}
    SECURE_DOCK_PROBE
    #restore current nozzle location
    #RESTORE_GCODE_STATE NAME=original_nozzle_location MOVE=1

## customize CALIBRATE Z gcode 
[gcode_macro CALIBRATE_Z]
rename_existing: BASE_CALIBRATE_Z
gcode:
    _CG28 RESET_SETTINGS=false
    M117 Z-Calibration..
    # reduce accel current
    SECURE_ATTACH_PROBE
    BASE_CALIBRATE_Z
    SECURE_DOCK_PROBE
    M117

[gcode_macro _CG28]
gcode:
  {% if "xyz" not in printer.toolhead.homed_axes %}
    G28 RESET_SETTINGS={ params.RESET_SETTINGS|default('true') }
  {% endif %}

[z_calibration]
# position on z-endstop for nozzle probing
probe_nozzle_x: 205 
probe_nozzle_y: 300
# position on z-endstop for switch probing
probe_switch_x: 201
probe_switch_y: 281
# position on bed for print surface probing
# !!! this must be the relative reference point of the mesh, if using one !!!
probe_bed_x: 150
probe_bed_y: 150
switch_offset: 0.470 # 0.670 ; smaller is more away from bed!
max_deviation: 0.8
speed: 300
clearance: 10 #5
#samples: 5
#samples_tolerance: 0.01 #0.006
#samples_tolerance_retries: 10
#samples_result: median
#position_min: -5
#lift_speed: 5 #8
#probing_speed: 7 #10
probing_second_speed: 5
probing_retract_dist: 2
probing_first_fast: true

## conditional home
[gcode_macro _CG28]
gcode:
  {% if "xyz" not in printer.toolhead.homed_axes %}
    G28 RESET_SETTINGS={ params.RESET_SETTINGS|default('true') }
  {% endif %}
